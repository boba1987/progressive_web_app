/**
 *  Do not remove the comments below. It's the markers used by wiredep to inject
 *  less dependencies when defined in the bower.json of your dependencies
 */
// bower:less
// endbower

/**
 *  If you want to override some bootstrap variables, you have to change values here.
 *  The list of variables are listed here bower_components/bootstrap/less/variables.less
 */
@navbar-inverse-link-color: #5AADBB;
@icon-font-path: '../../bower_components/bootstrap/fonts/';

.browsehappy {
  margin: 0.2em 0;
  background: #ccc;
  color: #000;
  padding: 0.2em 0;
}

.thumbnail {
  height: 200px;

  img.pull-right {
    width: 50px;
  }
}

a {
  &:focus {
    outline: none;
  }
}

/**
 *  Do not remove the comments below. It's the markers used by gulp-inject to inject
 *  all your less files automatically
 */
// injector
// endinjector

@c1: #3b5998;

// Main view styles



.container-list {
  padding: 0;
  margin: 0;
  list-style: none;
  padding-top: 100px;
  transition: left 0.3s;

  li {
    border-bottom: solid 1px;
    padding: 10px;
  }
}

.text-center-xs{
  @media(max-width: 767px){
    text-align: center;
  }
}

.img-center-xs{
  @media(max-width: 767px){
    display: block;
    margin: 0 auto;
  }
}

.container-list{
  position: relative;
  left: 0;

  li{
    &:hover{
      cursor: pointer;
      background: #e6f2ff;
    }
  }
}

.overlay-loading{
  background: white;
  opacity: 0.75;
  position: fixed;
  height: 100%;
  width: 100%;
  top: 0;
  left: 0;
}

.loading-spinner{
  position: fixed;
  top: 50%;
  left: 50%;
  margin-top: -25px;
  margin-left: -25px;
  width: 50px;
  height: 50px;
}

.head-stripe{
  background-color: @c1;
  color: white;
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  z-index: 3;
  height: 80px;
}

.main-view-holder{
  overflow: hidden;
  position: relative;
}

.product-list{
  &.open{
    .container-list{
      left: -300px;
    }

    single-product{
      right: 0;
    }
  }

  &.opened{
    .container-list{
      //opacity: 0;
      position: fixed;
      left: -100px;
    }

    single-product, .single-product{
      position: absolute;
    }
  }
}

/*
  We're using CSS transitions for when
  the enter and move events are triggered
  for the element that has the .repeated-item
  class
*/
.container-list.ng-enter, .repeated-item.ng-move {
  transition: all 0.5s linear;
  opacity: 0;
}

/*
 The ng-enter-active and ng-move-active
 are where the transition destination properties
 are set so that the animation knows what to
 animate.
*/
.container-list.ng-enter.ng-enter-active,
.container-list.ng-move.ng-move-active {
  opacity: 1;
}

/*
  We're using CSS keyframe animations for when
  the leave event is triggered for the element
  that has the .repeated-item class
*/
.container-list.ng-leave {
  animation: 0.5s my_animation;
}
