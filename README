Tamedia project overview

- Front-end tech stack:
    - JS: angular 1.4, bootstrap.js
    - CSS: LESS preprocessor, bootstrap
- Application states: Lates products, Product overview.
- Getting the data:
    - Applications data is received from www.ricardo.ch.
    - “Lates products” page is getting it’s data from API endpoints defined in file ./backend/proxy.js running small NODE app. This way CORS is avoided and could be used to move some intense actions to this middleware.
    - “Product overview” - since there is no API endpoint that will retrieve .json like response, page of selected product will be scraped in background using “nightmare” node module. This functionality is defined in ./backend/proxy.js -> /getSingleArticle route.
- Progressive app: to make this app “progressive” manifest.json, sw.js, main.js and offline.html files are added to ./dist folder
    - sw.js - Defines a service worker and defines files to be cached
    - main.js - Registers a service worker defined in sw.js


Project requirements:
    - node
    - npm

Project start:
    - run 'npm i',
    - run 'bower i',
    - run 'gulp serve:dist',

Project Documetation:
    - to see front-end application documentation run 'gulp ngdocs'
    - to see back-end application documentation run 'gulp ngdocs_backend'

Developer NOTES:
  - use gulp for the build tool and task runner
  - use ngdocs to build developer documentation
  - use angular to build front-end app
  - build node proxy server to avoid CORS ./backend/proxy.js
  - use "nightmare" node module to scrape single product page
